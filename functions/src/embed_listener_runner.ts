import { Client, Intents, Message, MessageEmbed, TextChannel, } from 'discord.js';
import { getRegexPatternFileName } from './author_switch_logic';
import { iterateRegPatternsAsyncEmbeds as iterateRegPatternsCheckingRedirectUrl, iterateRegPatternsAsyncString, iteratePatternsSynchronousEmbeds } from './embed_listener';
import { logger } from './logger';
import { getTweetShiftAuthor } from './utils';
import * as functions from "firebase-functions";

var client: Client = new Client({
    intents: [
        Intents.FLAGS.GUILDS, // todo remove unnecessary Intents
        Intents.FLAGS.GUILD_MEMBERS,
        Intents.FLAGS.GUILD_EMOJIS_AND_STICKERS,
        Intents.FLAGS.GUILD_INTEGRATIONS,
        Intents.FLAGS.GUILD_WEBHOOKS,
        Intents.FLAGS.DIRECT_MESSAGES,
        Intents.FLAGS.GUILD_MESSAGES, // in theory this is the only intent that is needed
        Intents.FLAGS.GUILD_PRESENCES
    ]
});
// todo move regex list to in-memory to speed up execution

client.on('messageCreate', (message: Message): void => { // todo test race condition with large volumes of tweets triggering simultaneously
    if (message.author.id === client.user?.id) return; // Doesn't trigger on self 
    if (!message.author.bot) return; // Ignores messages that aren't from bots
    logger.info('received new message to parse from', message.author, new Date())
    logger.info(`message content`, message)

    const lastMessage = (message.channel as TextChannel)?.lastMessage; // can't directly take message as an embed generated by link will not appear in messageCreate events
    logger.info('when fetching lastMessage, content retrived was', message, new Date())

    //const messageAuthor = lastMessage ? getTweetShiftAuthor(lastMessage) : undefined;
    const messageAuthor = lastMessage ? getTweetShiftAuthor(lastMessage) : undefined;
    const messageConfigFile = messageAuthor ? getRegexPatternFileName(messageAuthor) : getRegexPatternFileName("default");

    if (lastMessage?.embeds) {
        const embeds: MessageEmbed[] = lastMessage.embeds;
        const matchRes = iteratePatternsSynchronousEmbeds(embeds, messageConfigFile, client);
        if (matchRes == "NO MATCH") iterateRegPatternsCheckingRedirectUrl(embeds, true, messageConfigFile, client).catch(err => {
            logger.error(`error iterating reg patterns on redirect URL: ${err}`)
        });
    }
    else { // execute logic for raw string messages
        if (lastMessage?.content) iterateRegPatternsAsyncString(lastMessage?.content, messageConfigFile, client).catch(err => {
            logger.error(`error iterating reg patterns on redirect URL: ${err}`)
        });
    }
})

// Run program
if (functions.config().discord.botToken) {
    client.login(functions.config().discord.botToken);
    logger.info(`initialized client`, new Date())
}
else {
    logger.error(`No value of bot token, client failed to start`)
}